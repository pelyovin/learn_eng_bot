import random

from sqlalchemy import func, or_, and_
from tg_bot_db import Session, Translate, TargetWord, User
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

state_storage = StateMemoryStorage()
token_bot = ''
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []


def all_users():
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –∫–æ—Ä—Ç–µ–∂–∞–º–∏ –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    session = Session()
    kn_users = session.query(User.tg_id).all()
    session.close()
    return kn_users


def add_user(id):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î"""
    session = Session()
    if (id,) not in all_users():
        id = User(tg_id=id)
        session.add(id)
        session.commit()
    session.close()


def choose_wrong_words():
    """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    session = Session()
    words = list(word[0] for word in
                 session.query(TargetWord.word).filter(TargetWord.id != word_id[0]).order_by(
                     func.random()).limit(3).all())
    session.close()
    return words


def choose_target_word(user_id):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –¥–ª—è –Ω–µ–≥–æ —Å–ª–æ–≤–æ"""
    session = Session()
    choose_word = ''.join(*(session.query(TargetWord.word).join(TargetWord.user).
                            filter(or_(TargetWord.user_tg_id == 0, TargetWord.user_tg_id == user_id)).
                            order_by(func.random()).first()))
    global word_id
    word_id = session.query(Translate.id).join(Translate.target_word).filter(TargetWord.word == choose_word)[0]
    session.close()
    return choose_word


def translate_word():
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç target_word_id"""
    session = Session()
    translate = ''.join(*(session.query(Translate.translate).
                          join(Translate.target_word).filter(Translate.target_word_id == word_id[0]).first()))
    session.close()
    return translate


def show_hint(*lines):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —é–∑–µ—Ä —É–≥–∞–¥–∞–ª –ø–µ—Ä–µ–≤–æ–¥"""
    return '\n'.join(lines)


def show_target(data):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥"""
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ —é–∑–µ—Ä—É"""
    user_id = message.from_user.id
    cid = message.chat.id
    if (user_id,) not in all_users():
        add_user(user_id)
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, """–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. 
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.

–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. 
–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:

–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.
–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è'""")
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    target_word = choose_target_word(user_id)  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    translate = translate_word()  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = choose_wrong_words()  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_card(message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ create_cards(message)"""
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def ask_word_to_delete(message):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–æ —É —é–∑–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    session = Session()
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        cid = message.chat.id
        if (session.query(TargetWord.user_tg_id).filter(TargetWord.word == data['target_word']).first()) == (0,):
            bot.send_message(cid, f"""–¢—ã –º–æ–∂–µ—à—å —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–±–æ–π. 
–ü—Ä–æ–¥–æ–ª–∂–∏ —É–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–æ: üá∑üá∫'{data['translate_word']}' –∏–ª–∏ –Ω–∞–∂–º–∏ –î–∞–ª—å—à–µ ‚è≠ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞""")
        else:
            bot.send_message(cid,
                             f"""–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ "{show_target(data)}"? 
–ù–∞–ø–∏—à–∏ "–î–∞" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ –î–∞–ª—å—à–µ ‚è≠ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è""")
            bot.register_next_step_handler(message, delete_word)
    session.close()


def delete_word(message):
    """–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –ë–î"""
    user_id = message.chat.id
    user_answer = message.text
    session = Session()
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if user_answer.strip().lower() == '–¥–∞':
            target_id = session.query(TargetWord.id).filter(
                and_(TargetWord.word == data['target_word'], TargetWord.user_tg_id == user_id)).first()
            if session.query(TargetWord.user_tg_id).filter(and_(TargetWord.word == data['target_word'],
                                                                TargetWord.user_tg_id != 0,
                                                                TargetWord.user_tg_id == user_id)).first() is not None:
                session.query(Translate).filter(Translate.target_word_id == target_id[0]).delete()
                session.commit()
                session.query(TargetWord).filter(
                    and_(TargetWord.word == data['target_word'], TargetWord.user_tg_id == user_id)).delete()
                session.commit()
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ. –ù–∞–∂–º–∏ –î–∞–ª—å—à–µ ‚è≠ ")

    session.close()


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def ask_word_to_add(message):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–æ —É —é–∑–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    cid = message.chat.id
    userStep[cid] = 1
    bot.send_message(cid, '–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—ã—É—á–∏—Ç—å –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    bot.register_next_step_handler(message, add_word)


def add_word(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ –ë–î"""
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        user_id = message.from_user.id
        user_word = message.text
        session = Session()
        target_word = TargetWord(word=user_word.split()[0].title().strip(), user_tg_id=message.from_user.id)
        session.add(target_word)
        session.commit()
        target_id = session.query(TargetWord.id).filter(and_(TargetWord.word == user_word.split()[0].title().strip(),
                                                             TargetWord.user_tg_id == user_id)).first()[0]
        translate = Translate(translate=user_word.split()[1].title().strip(), target_word_id=target_id)
        session.add(translate)
        session.commit()
        session.close()
        bot.send_message(message.chat.id,
                         f"""–°–ª–æ–≤–æ '{user_word.split()[0]}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! 
–ü—Ä–æ–¥–æ–ª–∂–∏ —É–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–æ: üá∑üá∫'{data['translate_word']}' –∏–ª–∏ –Ω–∞–∂–º–∏ –î–∞–ª—å—à–µ ‚è≠ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞""")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≥–∞–¥–∞–ª –æ–Ω –µ–≥–æ –∏–ª–∏ –Ω–µ—Ç"""
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


if __name__ == '__main__':
    print('Start telegram bot...')
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.infinity_polling(skip_pending=True)
